// <auto-generated />
using System;
using API_Asset.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API_Asset.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200225133055_changetypetotypeitem")]
    partial class changetypetotypeitem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API_Asset.Models.Brand", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DeleteDate");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("id");

                    b.ToTable("tb_m_brand");
                });

            modelBuilder.Entity("API_Asset.Models.IncomingItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Incoming_date");

                    b.Property<string>("Information");

                    b.Property<int>("Item_id");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<int>("Supplier_id");

                    b.HasKey("id");

                    b.HasIndex("Item_id");

                    b.HasIndex("Supplier_id");

                    b.ToTable("tb_r_incominitem");
                });

            modelBuilder.Entity("API_Asset.Models.Item", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Brand_id");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DeleteDate");

                    b.Property<string>("Information");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.Property<int>("Stock");

                    b.Property<string>("Type_Item");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("id");

                    b.HasIndex("Brand_id");

                    b.ToTable("tb_m_item");
                });

            modelBuilder.Entity("API_Asset.Models.Lend", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Approve_Date_1");

                    b.Property<DateTime>("Approve_Date_2");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Damage_Level");

                    b.Property<string>("Damage_Type");

                    b.Property<DateTime>("DeleteDate");

                    b.Property<int>("Employee_id");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("Item_id");

                    b.Property<DateTime>("Lend_Date");

                    b.Property<int>("Quantity");

                    b.Property<string>("Status");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("id");

                    b.HasIndex("Item_id");

                    b.ToTable("tb_m_lend");
                });

            modelBuilder.Entity("API_Asset.Models.OutgoingItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Information");

                    b.Property<int>("Item_id");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Outgoing_Date");

                    b.Property<int>("Quantity");

                    b.HasKey("id");

                    b.HasIndex("Item_id");

                    b.ToTable("tb_r_outgoingitem");
                });

            modelBuilder.Entity("API_Asset.Models.Request", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Approve_Date_1");

                    b.Property<DateTime>("Approve_Date_2");

                    b.Property<int>("Brand_id");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DeleteDate");

                    b.Property<string>("Information");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("Item_id");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("id");

                    b.HasIndex("Brand_id");

                    b.HasIndex("Item_id");

                    b.ToTable("tb_m_request");
                });

            modelBuilder.Entity("API_Asset.Models.Supplier", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DeleteDate");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("id");

                    b.ToTable("tb_m_supplier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("roleclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("userlogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("userroles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("usertokens");
                });

            modelBuilder.Entity("API_Asset.Models.IncomingItem", b =>
                {
                    b.HasOne("API_Asset.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("Item_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API_Asset.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("Supplier_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API_Asset.Models.Item", b =>
                {
                    b.HasOne("API_Asset.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("Brand_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API_Asset.Models.Lend", b =>
                {
                    b.HasOne("API_Asset.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("Item_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API_Asset.Models.OutgoingItem", b =>
                {
                    b.HasOne("API_Asset.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("Item_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API_Asset.Models.Request", b =>
                {
                    b.HasOne("API_Asset.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("Brand_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API_Asset.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("Item_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
